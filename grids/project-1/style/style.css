body {
    margin: 0 auto;
    padding: 0;
    border: 0;
    background-color: white;
    width: 100%;
    height: 100svh;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
}

header {
    height: 100px;
    width: 100%;
    margin: 0;
    border: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 30px;
    font-weight: 600;
    position: fixed;
    left: 0;
    right: 0;
    top: 0;
}

footer {
    height: 100px;
    width: 100%;
    margin: 0;
    border: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 20px;
    font-size: 30px;
    font-weight: 600;
}

.main {
    width: 100%;
    display: flex;
    justify-content: start;
    align-items: center;
    flex-direction: column;
    margin-top: 120px;
    gap: 100px 0px;
    flex-grow: 1;
}

.grid-container {
    display: grid;
    gap: 5px;
    user-select: none;
    /* можно поступить либо таким образом, задавая каждому элементу высоту, либо(строка 54) */
    /* grid-template-columns: repeat(4, 50px); 
    grid-template-rows: repeat(3, 50px); */

    /* создаем схему сетки */
    grid-template-areas:
    "A A B B"
    "A A B B"
    "C C C C";
}

.item {
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: orange;
    color: whitesmoke;
    font-size: 30px;
    font-weight: 600;
    /* (от строки 36) использовать падинг */
    padding: 50px;
}
/* если оставить падинг, то все элементы будут одинаковы по высоте (в данном случае), но разные по длинне в соответствии с сеткой */
/* если оставить темплейты и репиты, но С будет ниже по высоте чем А и В так как в соответствии с сеткой А и В занимают больше места*/
.item-a {
    grid-area: A;
}

.item-b {
    grid-area: B;
}

.item-c {
    grid-area: C;
}


/* второй грид контейнер */
.grid-container-two {
    width: 1000px;
    height: 1000px;
    display: grid;
    user-select: none;
    padding: 20px;
    border: 2px dotted blue;
    grid-template-columns: 100px 200px 300px;
    column-gap: 20px;
    grid-template-rows: 100px 200px 300px;
    row-gap: 20px;

    justify-items: stretch;
    /* думаю что по дефолту лучше оставлять stretch (подгонятет под размеры колонн и строк), то же самое, что и align-items у flex-ов */
    align-items: stretch;
    /* по поводу align-items могу сказать то же самое */
    justify-content: center;
    /* всё как во flex-ах, за исключением того, что stretch прижимает к левому краю */
    align-content: space-between;
    /* то же самое, что и justify-content у flex-ов */
}

.item-two {
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 30px;
    font-weight: 600;
    background-color: blue;
    color: white;
}



/* третий грид контейнер */

.grid-container-three {
    width: 1000px;
    height: 600px;
    display: grid;

    /* вариант 1 */
    /* grid-template-columns: repeat(3, 100px);
    column-gap: 50px;
    grid-template-rows: repeat(4, 100px);
    row-gap: 50px; */

    /* вариант 2 */
    gap: 20px;

    justify-items: stretch;
    justify-content: center;
    align-content: start;

    /* не ставить запятые после строк, иначе всё сломается !!! */
    grid-template-areas:
    "E F F"
    "E F F"
    "E G G"
    "E G G" ;
}

.item-three {
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 30px;
    background-color: green;
    color: white;

    /* вариант 2 */
    padding: 50px;
}

.item-e {
    grid-area: E;
}

.item-f {
    grid-area: F;
}

.item-g {
    grid-area: G;
}

/* ВАЖНО, а то я, чайник, могу забыть */
/* если использовать justify-items, align-items задавая размеры колоннам и строкам, но НЕ задавая дочерним элементам паддинг 
или размеры (width, height), то эти св-ва будут сжимать элементы, в случае если заданы start, center или end */
/* ВАЖНО, а то я, чайник, могу забыть */



/* четвёртый грид контейнер */
.grid-container-four {
    width: 1000px;
    height: 1000px;
    display: grid;
    grid-template-columns: repeat(4, 150px);
    grid-template-rows: repeat(5, 150px);

    /* column-gap: 10px;
    row-gap: 10px; */
    /* либо */
    gap: 10px 10px;

    padding: 20px;
    border: 2px dotted purple;

    /* align-content: start;
    justify-content: center; */

    /* либо */
    place-content: start center;

    grid-template-areas: 
    "E1 E1 E1 E2"
    "E1 E1 E1 E2"
    "E1 E1 E1 E2"
    "E3 E3 E3 E3"
    "E3 E3 E3 E3";
}

.item-four {
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 35px;
    font-weight: 600;
    color: white;
    background-color: #FFE4B5;
}


.item-four.test {
    /* колонки */
    grid-column-start: span 2; /* не будет работать, если настроить areas

    /* либо */
    /* grid-column-start: 1;
    grid-column-end: 3; */
    
    /* либо */
    /* grid-column: 1 / 3; */

    /* строки */
    grid-row-start: span 2; /* не будет работать, если настроить areas

    /* либо */
    /* grid-row-start: 1;
    grid-row-end: 3; */

    /* либо */
    /* grid-row: 1 / 3; */
}

.cube-e1 {
    grid-area: E1;
    /* align-self: end; */
}
.cube-e2 {
    grid-area: E2;
    /* align-self: start; */
}
.cube-e3 {
    grid-area: E3;
    /* align-self: center; */
}